/**
 * 실행 콘텍스트 실행 과정
 *
 * 1. getPoint 오브젝트의 [[Scope]]에
 *    글로벌 오브젝트 설정
 * 2. 마지막 줄에서 getPoint() 함수 호출하면
 * 3. 엔진은 실행 콘텍스트를 생성하고
 *    실행 콘텍스트 안으로 이동합니다.
 *
 * ------
 * 준비단계
 * ------
 *
 * 4. 컴포넌트를 생성하여 실행 콘텍스트에 첨부
 *    - 렉시컬 환경 컴포넌트
 *    - 변수 환경 컴포넌트
 *    - this 바인딩 컴포넌트
 * 5. 환경 레코드를 생성하여
 *    렉시컬 환경 컴포넌트에 첨부
 *      - 함수 안의 함수, 변수를 바인딩합니다.
 * --- 여기까지 모습 ---
 * 실행 콘텍스트(EC): {
 * 렉시컬 환경 컴포넌트(LEC): {
 *    환경 레코드(ER): {}
 *    },
 *    변수 환경 컴포넌트(VEC): {},
 *    this 바인딩 컴포넌트(TBC): {}
 * }
 * 6. 외부 렉시컬 환경 참조를 생성하여
 *    렉시컬 환경 컴포넌트에 첨부하고
 *      - function 오브젝트의 [[Scope]]를 설정
 * --- 여기까지 모습 ---
 * 실행 콘텍스트(EC): {
 * 렉시컬 환경 컴포넌트(LEC): {
 *    환경 레코드(ER): {},
 *    외부 렉시컬 환경 참조(OLER): {
 *        base: 200
 *      }
 *    },
 *    변수 환경 컴포넌트(VEC): {},
 *    this 바인딩 컴포넌트(TBC): {}
 * }
 *
 * ------
 * 초기화 단계
 * ------
 *
 * 7. 호출한 함수의 파라미터 값을
 *    - 호출된 함수의 파라미터 이름에 매핑
 *    - 환경 레코드에 작성
 * 8. 함수 선언문을 function 오브젝트로 생성
 * 9. 함수 표현식과 변수에 초기값 설정
 * 10. 여기까지는 외부에 실행 상태를 제공하지 않습니다.
 * --- 여기까지 모습 ---
 * 실행 콘텍스트(EC): {
 * 렉시컬 환경 컴포넌트(LEC): {
 *    환경 레코드(ER): {
 *      bonus: 70,
 *      point: undefined
 *    },
 *    외부 렉시컬 환경 참조(OLER): {
 *        base: 200
 *      }
 *    },
 *    변수 환경 컴포넌트(VEC): {},
 *    this 바인딩 컴포넌트(TBC): {}
 * }
 * ------
 * 실행 단계
 * ------
 *
 * 11. 함수 안의 코드를 실행합니다.
 *    - var point = 100;
 * 12. 실행 콘텍스트 안에서 관련된
 *     함수와 변수를 사용할 수 있습니다.
 *
 */
console.log("[코드1] 실행 콘텍스트 실행 과정");
var base = 200;
function getPoint(bouns) {
  var point = 100;
  return point + base + bouns;
};
console.log(getPoint(70)) // 370

/**
 * [정리 시간]
 *
 * - 요구 사항
 * - 123이 console에 출력되는 과정을
 *   실행 콘텍스트 관점에서
 *   논리적으로 전개하세요.
 */
console.log("[코드2] 실행 콘텍스트 정리");
function book() {
  function get() {
    return point;
  };
  var point = 123;
  return get();
};
console.log(book());  // 123