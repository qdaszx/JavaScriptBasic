/**
 * 파라미터 값 할당 기준
 *
 * 아래의 설명을 따라 가면서
 * {key: value} 형태로 만들어 보세요.
 *
 * ------
 * 초기화 단계
 * ------
 *
 * 1. obj.getTotal(11, 22) 함수가 호출되면
 *    - 파라미터 값을 실행 콘텍스트로 넘겨줍니다.
 * 2. 파라미터 이름에 값을 매핑하여
 *    - 선언적 환경 레코드에 설정합니다.
 *    - {one: 11, two: 22}
 * 3. var one;
 *    - 선언적 환경 레코드에서 one의 존재를 체크
 *    - 파라미터 이름을 설정하였으므로 존재하며
 *    - one을 기록하지 않습니다.
 * 4. two = 77;
 *    - 선언적 환경 레코드에서 two의 존재를 체크
 *    - 파라미터 이름을 설정하였으므로 존재하며
 *    - two를 기록하지 않습니다.
 * 5. 함수에 초기화할 코드가 없습니다.
 *    - 첫 번째 줄로 이동하여 함수 코드를 실행합니다.
 *
 * ------
 * 실행 단계
 * ------
 *
 * 6. 선언적 환경 레코드는
 *    {one: 11, two: 22} 상태
 * 7. var one;
 *    - 단지, 변수 선언이므로 처리하지 않습니다.
 * 8. console.log(one + two);
 *    - 선언적 환경 레코드에서
 *    - one과 two의 값을 구합니다.
 *    - 11 + 22의 결과인 33인 [실행 결과]에 출력
 * 9. two = 77;
 *    - 값을 할당하는 코드이며 실행 단계이므로
 *    - 선언적 환경 레코드의 two에 77을 할당하며
 *    - {two: 22}기 {two: 77}로 변경됩니다.
 * 10. console.log("two:" + two);
 *    - 선언적 환경 레코드에서 two의 값을 구합니다.
 *    - [실행 결과]에 two:77이 출력됩니다.
 */
console.log("[코드1] 파라미터 값 할당 기준");
var obj = {};
obj.getTotal = function (one, two) {
  var one;
  console.log(one + two); // 33
  two = 77;
  console.log("two:" + two);  // two:77
};
obj.getTotal(11, 22);

/**
 * [정리 시간]
 *
 * - 오른쪽 코드를 기준으로
 *   엔진 관점엣 [실행 결과]에 출력된 값의
 *   논리를 제시하세요.
 *    - 함수의 파라미터 값이 매핑되는 과정을
 *    - {key: value} 형태로 기술하고
 *    - 값이 출력되는 논리를 생각(기술)하세요.
 * - 힌트
 *    - 두 번째, 세 번째 파라미터 이름이 같습니다.
 */
console.log("[코드2] 정리 시간");
var obj2 = {};
obj2.getTotal = function (one, two, two) {
  console.log(one + two); // 66
};
obj2.getTotal(11, 22, 55);